{{>licenseInfo}}

package {{invokerPackage}};

import android.net.Uri;

import com.ca.mas.foundation.MASRequest;
import com.ca.mas.foundation.MASRequestBody;

import java.io.File;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import {{invokerPackage}}.MASUriInterceptor;


public class ApiClient {

    private String basePath = "{{{basePath}}}";
    private boolean debugging = false;
    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();
    private String tempFolderPath = null;
    private Parser parser;
    private List<MASUriInterceptor> interceptors = new ArrayList<>();


    private OnRequestListener requestListener;

    /*
     * Constructor for ApiClient
     */
    public ApiClient() {
        // Set default User-Agent.
        parser = new Parser();
        setUserAgent("Swagger-Codegen/1.0.0/java");

    }

    public Parser getParser() {
        return parser;
    }

    public void setParser(Parser parser) {
        this.parser = parser;
    }

    public void addInterceptor(MASUriInterceptor interceptor) {
        interceptors.add(interceptor);
    }

    /**
     * Get base path
     *
     * @return Baes path
     */
    public String getBasePath() {
        return basePath;
    }

    /**
     * Set base path
     *
     * @param basePath Base path of the URL (e.g https://apisandbox.bancobmg.com.br:8443/v1
     * @return An instance of OkHttpClient
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        return this;
    }

    /**
     * Set the User-Agent header's value (by adding to the default header map).
     *
     * @param userAgent HTTP request's user agent
     * @return ApiClient
     */
    public ApiClient setUserAgent(String userAgent) {
        addDefaultHeader("User-Agent", userAgent);
        return this;
    }

    /**
     * Add a default header.
     *
     * @param key   The header's key
     * @param value The header's value
     * @return ApiClient
     */
    public ApiClient addDefaultHeader(String key, String value) {
        defaultHeaderMap.put(key, value);
        return this;
    }

    /**
     * Check that whether debugging is enabled for this API client.
     *
     * @return True if debugging is enabled, false otherwise.
     */
    public boolean isDebugging() {
        return debugging;
    }


    /**
     * The path of temporary folder used to store downloaded files from endpoints
     * with file response. The default value is <code>null</code>, i.e. using
     * the system's default tempopary folder.
     *
     * @return Temporary folder path
     * @see <a href="https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile">createTempFile</a>
     */
    public String getTempFolderPath() {
        return tempFolderPath;
    }

    /**
     * Set the temporary folder path (for downloading files)
     *
     * @param tempFolderPath Temporary folder path
     * @return ApiClient
     */
    public ApiClient setTempFolderPath(String tempFolderPath) {
        this.tempFolderPath = tempFolderPath;
        return this;
    }

    /**
     * Get connection timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getConnectTimeout() {
        //TODO
        //return httpClient.getConnectTimeout();
        return 0;
    }

    /**
     * Sets the connect timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link Integer#MAX_VALUE}.
     *
     * @param connectionTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setConnectTimeout(int connectionTimeout) {
        //TODO
        //httpClient.setConnectTimeout(connectionTimeout, TimeUnit.MILLISECONDS);
        return this;
    }

    /**
     * Get read timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getReadTimeout() {
        //TODO
        //return httpClient.getReadTimeout();
        return 0;
    }

    /**
     * Sets the read timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link Integer#MAX_VALUE}.
     *
     * @param readTimeout read timeout in milliseconds
     * @return Api client
     */
    public ApiClient setReadTimeout(int readTimeout) {
        //TODO
        //httpClient.setReadTimeout(readTimeout, TimeUnit.MILLISECONDS);
        return this;
    }

    /**
     * Get write timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getWriteTimeout() {
        //return httpClient.getWriteTimeout();
        //TODO
        return 0;
    }

    /**
     * Sets the write timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link Integer#MAX_VALUE}.
     *
     * @param writeTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setWriteTimeout(int writeTimeout) {
        //TODO
        //httpClient.setWriteTimeout(writeTimeout, TimeUnit.MILLISECONDS);
        return this;
    }




    /**
     * Sanitize filename by removing path.
     * e.g. ../../sun.gif becomes sun.gif
     *
     * @param filename The filename to be sanitized
     * @return The sanitized filename
     */
    public String sanitizeFilename(String filename) {
        return filename.replaceAll(".*[/\\\\]", "");
    }


    /**
     * Select the Accept header's value from the given accepts array:
     * if JSON exists in the given array, use it;
     * otherwise use all of them (joining into a string)
     *
     * @param accepts The accepts array to select from
     * @return The Accept header to use. If the given array is empty,
     * null will be returned (not to set the Accept header explicitly).
     */
    public String selectHeaderAccept(String[] accepts) {
        if (accepts.length == 0) {
            return null;
        }
        for (String accept : accepts) {
            if (parser.isJsonMime(accept)) {
                return accept;
            }
        }
        return StringUtil.join(accepts, ",");
    }

    /**
     * Select the Content-Type header's value from the given array:
     * if JSON exists in the given array, use it;
     * otherwise use the first one of the array.
     *
     * @param contentTypes The Content-Type array to select from
     * @return The Content-Type header to use. If the given array is empty,
     * or matches "any", JSON will be used.
     */
    public String selectHeaderContentType(String[] contentTypes) {
        if (contentTypes.length == 0 || contentTypes[0].equals("*/*")) {
            return "application/json";
        }
        for (String contentType : contentTypes) {
            if (parser.isJsonMime(contentType)) {
                return contentType;
            }
        }
        return contentTypes[0];
    }


    /**
     * Build HTTP call with the given options.
     *
     * @param path                    The sub-path of the HTTP URL
     * @param method                  The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams             The query parameters
     * @param collectionQueryParams   The collection query parameters
     * @param body                    The request body object
     * @param headerParams            The header parameters
     * @param formParams              The form parameters
     * @param authNames               The authentications to apply
     * @return The HTTP call
     * @throws ApiException If fail to serialize the request body object
     */
    public MASRequest buildCall(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames) throws ApiException {
        return buildRequest(path, method, queryParams, collectionQueryParams, body, headerParams, formParams, authNames).build();
    }

    /**
     * Build an HTTP request with the given options.
     *
     * @param path                    The sub-path of the HTTP URL
     * @param method                  The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams             The query parameters
     * @param collectionQueryParams   The collection query parameters
     * @param body                    The request body object
     * @param headerParams            The header parameters
     * @param formParams              The form parameters
     * @param authNames               The authentications to apply
     * @return The HTTP request
     * @throws ApiException If fail to serialize the request body object
     */
    public MASRequest.MASRequestBuilder buildRequest(String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, Object> formParams, String[] authNames) throws ApiException {
        Uri uri = buildUrl(path, queryParams, collectionQueryParams);

        if (!interceptors.isEmpty()) {
            for (MASUriInterceptor interceptor : interceptors) {
                uri = interceptor.intercept(uri);
                if (uri == null) {
                    throw new IllegalStateException("MASUriInterceptor n√£o pode retornar null!");
                }
            }
        }

        MASRequest.MASRequestBuilder requestBuilder =
                new MASRequest.MASRequestBuilder(uri);


        processHeaderParams(headerParams, requestBuilder);


        String contentType = (String) headerParams.get("Content-Type");
        // ensuring a default content type
        if (contentType == null) {
            contentType = "application/json";
        }

        MASRequestBody reqBody = null;
        if (!HttpMethodHelper.permitsRequestBody(method)) {
            reqBody = null;
        } else if ("application/x-www-form-urlencoded".equals(contentType)) {
            reqBody = MASRequestBody.urlEncodedFormBody(buildRequestBodyFormEncoding(formParams));
        } else if ("multipart/form-data".equals(contentType)) {
            //reqBody = MASRequestBody.byteArrayBody(buildRequestBodyMultipart(formParams));
        } else if (body == null) {
            if ("DELETE".equals(method)) {
                // allow calling DELETE without sending a request body
                reqBody = null;
            } else {
                // use an empty request body (for POST, PUT and PATCH)
                reqBody = MASRequestBody.stringBody("");
            }
        } else {
            reqBody = parser.serialize(body, contentType);
        }

        switch (method) {
            case "POST":
                return requestBuilder.post(reqBody);
            case "GET":
                return requestBuilder.get();
            case "PUT":
                return requestBuilder.put(reqBody);
            case "DELETE":
                return requestBuilder.delete(reqBody);
            default:
                throw new RuntimeException("Method " + method + " is not supported");
        }


    }

    /**
     * Build full URL by concatenating base path, the given sub path and query parameters.
     *
     * @param path                  The sub path
     * @param queryParams           The query parameters
     * @param collectionQueryParams The collection query parameters
     * @return The full URL
     */
    public Uri buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {

        Uri.Builder uriBuilder = new Uri.Builder().encodedPath(basePath + path);


        if (queryParams != null && !queryParams.isEmpty()) {
            for (Pair param : queryParams) {
                uriBuilder.appendQueryParameter(param.getName(), param.getValue());
            }
        }

        if (collectionQueryParams != null && !collectionQueryParams.isEmpty()) {
            for (Pair param : collectionQueryParams) {
                uriBuilder.appendQueryParameter(param.getName(), param.getValue());
            }
        }

        return uriBuilder.build();
    }

    /**
     * Set header parameters to the request builder, including default headers.
     *
     * @param headerParams Header parameters in the ofrm of Map
     * @param reqBuilder   Reqeust.Builder
     */
    public void processHeaderParams(Map<String, String> headerParams, MASRequest.MASRequestBuilder reqBuilder) {
        for (Entry<String, String> param : headerParams.entrySet()) {
            reqBuilder.header(param.getKey(), parser.parameterToString(param.getValue()));
        }
        for (Entry<String, String> header : defaultHeaderMap.entrySet()) {
            if (!headerParams.containsKey(header.getKey())) {
                reqBuilder.header(header.getKey(), parser.parameterToString(header.getValue()));
            }
        }
    }


    /**
     * Build a form-encoding request body with the given form parameters.
     *
     * @param formParams Form parameters in the form of Map
     * @return RequestBody
     */
    public List<? extends android.util.Pair<String, String>> buildRequestBodyFormEncoding(Map<String, Object> formParams) {

        List<android.util.Pair<String, String>> fields = new ArrayList<>();

        for (Entry<String, Object> param : formParams.entrySet()) {
            fields.add(new android.util.Pair<>(param.getKey(), parser.parameterToString(param.getValue())));
        }

        return fields;
    }


    /**
     * Guess Content-Type header from the given file (defaults to "application/octet-stream").
     *
     * @param file The given file
     * @return The guessed Content-Type
     */
    public String guessContentTypeFromFile(File file) {
        String contentType = URLConnection.guessContentTypeFromName(file.getName());
        if (contentType == null) {
            return "application/octet-stream";
        } else {
            return contentType;
        }
    }

    public OnRequestListener getRequestListener() {
        return requestListener;
    }

    public void setRequestListener(OnRequestListener requestListener) {
        this.requestListener = requestListener;
    }
}
